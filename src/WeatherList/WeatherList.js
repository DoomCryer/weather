import React, { Component } from 'react'
import { AutoComplete, Input, Table, Button } from 'antd'
import _ from 'lodash'
import http from '../utils/http'
import './WeatherList.css'

const Option = AutoComplete.Option

class WeatherList extends Component {
	state = {
		suggestions: [],
		cities: [
			{
				id: 524901,
				name: 'Moscow',
				coord: {
					lat: 55.7507,
					lon: 37.6177,
				},
				main: {
					temp: -4.75,
					pressure: 1011,
					humidity: 67,
					temp_min: -5,
					temp_max: -4,
				},
				dt: 1521010800,
				wind: {
					speed: 5,
					deg: 200,
				},
				sys: {
					country: 'RU',
				},
				rain: null,
				snow: null,
				clouds: {
					all: 90,
				},
				weather: [
					{
						id: 804,
						main: 'Clouds',
						description: 'overcast clouds',
						icon: '04d',
					},
				],
			},
			{
				id: 500096,
				name: 'Ryazan',
				coord: {
					lat: 54.6296,
					lon: 39.7425,
				},
				main: {
					temp: -5.67,
					pressure: 1009.96,
					humidity: 89,
					temp_min: -5.67,
					temp_max: -5.67,
					sea_level: 1028.41,
					grnd_level: 1009.96,
				},
				dt: 1521012645,
				wind: {
					speed: 8.16,
					deg: 185.504,
				},
				sys: {
					country: 'RU',
				},
				rain: null,
				snow: null,
				clouds: {
					all: 36,
				},
				weather: [
					{
						id: 802,
						main: 'Clouds',
						description: 'scattered clouds',
						icon: '03d',
					},
				],
			},
			{
				id: 2643743,
				name: 'London',
				coord: {
					lat: 51.5073,
					lon: -0.1277,
				},
				main: {
					temp: 4.7,
					pressure: 1007,
					humidity: 87,
					temp_min: 3,
					temp_max: 6,
				},
				dt: 1521010200,
				wind: {
					speed: 4.1,
					deg: 130,
				},
				sys: {
					country: 'GB',
				},
				rain: null,
				snow: null,
				clouds: {
					all: 24,
				},
				weather: [
					{
						id: 701,
						main: 'Mist',
						description: 'mist',
						icon: '50d',
					},
				],
			},
		],
		selectedCityId: 0,
	}

	searchThrottle = _.throttle(() => this.search(), 600)

	search = () => {
		const name = this.inputField.props.value
		const result = http
			.findCity({ q: name })
			.then(response => {
				const { data } = response
				this.setState({ suggestions: data.list })
			})
			.catch(error => {
				this.setState({ suggestions: [] })
			})
	}

	renderOption = item => {
		//sometimes the search yields several cities with the same id, so we need to generate unique key
		const key = `${item.id}-${_.random(100, 999)}`
		return (
			<Option key={key} text={item.name}>
				{item.name}
			</Option>
		)
	}

	onSelect = value => {
		//delete autogenerated suffix from id
		const id = _.parseInt(value.slice(0, -4))
		this.setState({ selectedCityId: id })
	}

	addCity = () => {
		const { selectedCityId, cities, suggestions } = this.state
		if (!cities.some(item => item.id === selectedCityId)) {
			const city = suggestions.find(item => item.id === selectedCityId)
			this.setState({ cities: [...cities, city] })
		}
	}

	removeCity = id => {
		const { cities } = this.state
		const index = _.findIndex(cities, ['id', id])
		this.setState({ cities: [...cities.slice(0, index), ...cities.slice(index + 1)] })
	}

	render() {
		const { suggestions, cities } = this.state
		console.log('RENDER CITIES ', cities)
		const foundedCities = _.map(suggestions, this.renderOption)
		const columns = [
			{
				title: 'City',
				dataIndex: 'name',
				key: 'name',
				defaultSortOrder: 'ascend',
				sorter: (a, b) => a.name.localeCompare(b.name),
			},
			{
				title: 'Temperature',
				dataIndex: 'main.temp',
				key: 'temp',
			},
			{
				title: 'Pressure',
				dataIndex: 'main.pressure',
				key: 'pressure',
			},
			{
				title: '',
				dataIndex: '',
				key: 'x',
				render: (label, item) => (
					<Button onClick={() => this.removeCity(item.id)} icon="close" shape="circle" />
				),
				width: 50,
			},
		]

		return (
			<div className="root">
				<h1>Weather Application</h1>
				<div className="search-field">
					<AutoComplete
						style={{ width: '150px' }}
						dataSource={foundedCities}
						onSearch={this.searchThrottle}
						onSelect={this.onSelect}
						optionLabelProp="text"
						placeholder={`Enter city name`}
					>
						<Input ref={field => (this.inputField = field)} />
					</AutoComplete>
					<Button style={{ marginLeft: '16px' }} type="primary" onClick={this.addCity}>
						Add
					</Button>
				</div>

				<Table
					pagination={false}
					bordered
					rowKey="id"
					onRow={this.onRow}
					columns={columns}
					dataSource={cities}
				/>
			</div>
		)
	}
}

export default WeatherList
